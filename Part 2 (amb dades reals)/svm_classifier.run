reset;
print "--------------------SVM Classifier Primal--------------------";

# General parameters.
param nu;
param n >= 1, integer;
param m >= 1, integer;

# Train parameters.
param A_train {1..m, 1..n};
param y_train {1..m};

# Test parameters.
param A_test {1..m, 1..n};
param y_test {1..m};

# Variables.
var w{1..n}; # Normal vector of the hyperplane.
var gamma;   # Intercept.
var s{1..m}; # Slack.

# Loads the training data.
data spam_data.dat;

# Sets the solver algorithm used to handle the optimization proble.
option solver cplex;

# Primal optimization problem for the (SVM) classifier.
model svm_classifier_primal.mod;
option cplex_options 'timing=1';
solve;

# Saves the results form the problem optimization.
display w > results_primal.txt;
display gamma > results_primal.txt;
display s > results_primal.txt;

# Computes the accurracy of the classifier.
param y_pred {1..m};

let {i in {1..m}} y_pred[i] := sum{j in 1..n} w[j] * A_test[i,j] + gamma;
let {i in {1..m}} y_pred[i] := if y_pred[i] <= 0 then -1 else 1;

display y_pred > results_primal.txt;

param accurracy default 0;

for {i in {1..m}} {
	if y_pred[i] == y_test[i] then
		let accurracy := accurracy + 1;
}
 
display (accurracy / m) * 100 > results_primal.txt;

reset;
print "--------------------SVM Classifier Dual--------------------";

# General parameters.
param nu;
param n >= 1, integer;
param m >= 1, integer;

# Train parameters.
param A_train {1..m, 1..n};
param y_train {1..m};

# Test parameters.
param A_test {1..m, 1..n};
param y_test {1..m};

# Variables and variable limits.
var lambda{1..m} >= 0, <= nu;

# Loads the training data.
data spam_data.dat;

# Dual optimization problem for the (SVM) classifier.
model svm_classifier_dual.mod;
option cplex_options 'timing=1';
solve;

# Computes hyperplane parameters from dual resolution.
param w {1..n};
let {j in 1..n} w[j] := sum{i in 1..m} lambda[i] * y_train[i] * A_train[i,j];
display w > results_dual.txt;

param gamma;
param i default 1;
param found default 0;

repeat while (i <= m && !found) {
	if (lambda[i] > 1e-4 && lambda[i] < nu - 1e-8) then
		let found := 1;
	else
		let i := i + 1;
}

let gamma := 1/y_train[i] - sum {j in 1..n} A_train[i,j] * w[j];
display gamma > results_dual.txt;

# Prediction for the test dataset.
param y_pred {1..m};
let {t in {1..m}} y_pred[t] := sum{j in 1..n} w[j] * A_test[t,j] + gamma;
let {t in {1..m}} y_pred[t] := if y_pred[t] <= 0 then -1 else 1;
display y_pred > results_dual.txt;

# Misclassifications.
param accurracy default 0;
for {t in {1..m}} {
	if y_pred[t] == y_test[t] then
		let accurracy := accurracy + 1;
}
display (accurracy / m) * 100 > results_dual.txt;

display lambda > results_dual.txt;

print "--------------------SVM Classifier using Gaussian kernel--------------------";

# General parameters.
param nu;
param n >= 1, integer;
param m >= 1, integer;

# Train parameters.
param A_train {1..m, 1..n};
param y_train {1..m};

# Test parameters.
param A_test {1..m, 1..n};
param y_test {1..m};

# Variables and variable limits.
var lambda{1..m} >= 0, <= nu;

# Loads the training data.
data linearly_nonseparable_data.dat;

# Dual optimization problem for the (SVM) classifier.
model gaussian_kernel.mod;
option cplex_options 'timing=1';
solve;

# Computes hyperplane parameters from dual resolution.
param w {1..n};
let {j in 1..n} w[j] := sum{i in 1..m} lambda[i] * y_train[i] * A_train[i,j];
display w > results_dual.txt;

param gamma;
param i default 1;
param found default 0;

repeat while (i <= m && !found) {
	if (lambda[i] > 1e-4 && lambda[i] < nu - 1e-8) then
		let found := 1;
	else
		let i := i + 1;
}

let gamma := 1/y_train[i] - sum {j in 1..n} A_train[i,j] * w[j];
display gamma > results_dual.txt;

# Prediction for the test dataset.
param y_pred {1..m};
let {t in {1..m}} y_pred[t] := sum{j in 1..n} w[j] * A_test[t,j] + gamma;
let {t in {1..m}} y_pred[t] := if y_pred[t] <= 0 then -1 else 1;
display y_pred > results_dual.txt;

# Misclassifications.
param accurracy default 0;
for {t in {1..m}} {
	if y_pred[t] == y_test[t] then
		let accurracy := accurracy + 1;
}
display (accurracy / m) * 100 > results_dual.txt;

display lambda > results_dual.txt;
